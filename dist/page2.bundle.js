/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/page_2bottom/bottom.js":
/*!************************************!*\
  !*** ./src/page_2bottom/bottom.js ***!
  \************************************/
/***/ (() => {

eval("// document.addEventListener('DOMContentLoaded', () => {\n//   const scope = document.querySelector('.scope');\n//   const centerDot = document.querySelector('.center-dot');\n//   const crosshair = document.querySelector('.crosshair');\n//   const infoBox = document.getElementById('info-box');\n//   const pointCount = 5;\n//   const points = [];\n\n//   // 랜덤 점 생성\n//   for (let i = 0; i < pointCount; i++) {\n//       const point = document.createElement('div');\n//       point.classList.add('point');\n//       point.style.top = `${Math.random() * 100}%`;\n//       point.style.left = `${Math.random() * 100}%`;\n//       scope.appendChild(point);\n//       points.push(point);\n//   }\n\n//   // 중앙 점 드래그 앤 드롭 기능 구현\n//   let isDragging = false;\n//   let offsetX, offsetY;\n\n//   centerDot.addEventListener('mousedown', (e) => {\n//       isDragging = true;\n//       offsetX = e.offsetX;\n//       offsetY = e.offsetY;\n//       centerDot.style.pointerEvents = 'none'; // 드래그 중에는 이벤트 방지\n//   });\n\n//   document.addEventListener('mousemove', (e) => {\n//       if (isDragging) {\n//           const rect = scope.getBoundingClientRect();\n//           const radius = rect.width / 2;\n//           const centerX = rect.left + radius;\n//           const centerY = rect.top + radius;\n\n//           let x = e.clientX - rect.left - offsetX;\n//           let y = e.clientY - rect.top - offsetY;\n\n//           // 원 안에서의 움직임 제한\n//           const distance = Math.sqrt((x + centerDot.offsetWidth / 2 - radius) ** 2 + (y + centerDot.offsetHeight / 2 - radius) ** 2);\n\n//           if (distance < radius) {\n//               centerDot.style.left = `${x}px`;\n//               centerDot.style.top = `${y}px`;\n\n//               // 십자선 위치 업데이트\n//               updateCrosshair(x + centerDot.offsetWidth / 2, y + centerDot.offsetHeight / 2, radius);\n//           } else {\n//               // 경계 바깥으로 나가지 않도록 제한\n//               const angle = Math.atan2(y - radius + centerDot.offsetHeight / 2, x - radius + centerDot.offsetWidth / 2);\n//               x = radius + Math.cos(angle) * (radius - centerDot.offsetWidth / 2) - centerDot.offsetWidth / 2;\n//               y = radius + Math.sin(angle) * (radius - centerDot.offsetHeight / 2) - centerDot.offsetHeight / 2;\n\n//               centerDot.style.left = `${x}px`;\n//               centerDot.style.top = `${y}px`;\n\n//               // 십자선 위치 업데이트\n//               updateCrosshair(x + centerDot.offsetWidth / 2, y + centerDot.offsetHeight / 2, radius);\n//           }\n\n//           // 점 위치 감지 및 정보 표시\n//           let pointFound = false;\n//           points.forEach(point => {\n//               const pointRect = point.getBoundingClientRect();\n//               const pointX = pointRect.left - rect.left + pointRect.width / 2;\n//               const pointY = pointRect.top - rect.top + pointRect.height / 2;\n\n//               const distance = Math.sqrt((x + centerDot.offsetWidth / 2 - pointX) ** 2 + (y + centerDot.offsetHeight / 2 - pointY) ** 2);\n\n//               if (distance < 5) { // 조준점과 점이 가까우면\n//                   infoBox.style.display = 'flex';\n//                   infoBox.textContent = 'Point detected!';\n//                   pointFound = true;\n//               }\n//           });\n\n//           if (!pointFound) {\n//               infoBox.style.display = 'none';\n//           }\n//       }\n//   });\n\n//   document.addEventListener('mouseup', () => {\n//       isDragging = false;\n//       centerDot.style.pointerEvents = 'auto'; // 드래그 종료 후 이벤트 재활성화\n//   });\n\n//   function updateCrosshair(x, y, radius) {\n//       const verticalLine = crosshair.querySelector('::before');\n//       const horizontalLine = crosshair.querySelector('::after');\n\n//       verticalLine.style.height = `${Math.abs(y - radius)}px`;\n//       verticalLine.style.top = y > radius ? `${radius}px` : `${y}px`;\n\n//       horizontalLine.style.width = `${Math.abs(x - radius)}px`;\n//       horizontalLine.style.left = x > radius ? `${radius}px` : `${x}px`;\n//   }\n// });\n\n\n// document.addEventListener('DOMContentLoaded', () => {\n//   const scope = document.querySelector('.scope');\n//   const centerDot = document.querySelector('.center-dot');\n//   const crosshairVertical = document.querySelector('.crosshair-vertical');\n//   const crosshairHorizontal = document.querySelector('.crosshair-horizontal');\n//   const infoBox = document.getElementById('info-box');\n//   const pointCount = 5;\n//   const points = [];\n//   const moveStep = 5; // 점 이동 단위 거리\n\n//   // 랜덤 점 생성\n//   for (let i = 0; i < pointCount; i++) {\n//       const point = document.createElement('div');\n//       point.classList.add('point');\n//       point.style.top = `${Math.random() * 100}%`;\n//       point.style.left = `${Math.random() * 100}%`;\n//       scope.appendChild(point);\n//       points.push(point);\n//   }\n\n//   // 점 이동 함수\n//   function moveDot(dx, dy) {\n//       const rect = scope.getBoundingClientRect();\n//       const radius = rect.width / 2;\n//       const dotRect = centerDot.getBoundingClientRect();\n\n//       let x = dotRect.left - rect.left + dx + dotRect.width / 2;\n//       let y = dotRect.top - rect.top + dy + dotRect.height / 2;\n\n//       // 원 안에서의 움직임 제한\n//       const distance = Math.sqrt((x - radius) ** 2 + (y - radius) ** 2);\n\n//       if (distance <= radius) {\n//           centerDot.style.left = `${(x / rect.width) * 100}%`;\n//           centerDot.style.top = `${(y / rect.height) * 100}%`;\n\n//           // 십자선 위치 업데이트\n//           updateCrosshair(x, y, radius);\n\n//           // 점 위치 감지 및 정보 표시\n//           let pointFound = false;\n//           points.forEach(point => {\n//               const pointRect = point.getBoundingClientRect();\n//               const pointX = pointRect.left - rect.left + pointRect.width / 2;\n//               const pointY = pointRect.top - rect.top + pointRect.height / 2;\n\n//               const distance = Math.sqrt((x - pointX) ** 2 + (y - pointY) ** 2);\n\n//               if (distance < 5) { // 조준점과 점이 가까우면\n//                   infoBox.style.display = 'flex';\n//                   infoBox.textContent = 'Point detected!';\n//                   pointFound = true;\n//               }\n//           });\n\n//           if (!pointFound) {\n//               infoBox.style.display = 'none';\n//           }\n//       }\n//   }\n\n//   function updateCrosshair(x, y, radius) {\n//       crosshairVertical.style.left = `${x}px`;\n//       crosshairHorizontal.style.top = `${y}px`;\n//   }\n\n//   // 방향 버튼 이벤트 리스너 추가\n//   document.getElementById('up').addEventListener('click', () => moveDot(0, -moveStep));\n//   document.getElementById('left').addEventListener('click', () => moveDot(-moveStep, 0));\n//   document.getElementById('down').addEventListener('click', () => moveDot(0, moveStep));\n//   document.getElementById('right').addEventListener('click', () => moveDot(moveStep, 0));\n// });\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const scope = document.querySelector('.scope');\n  const centerDot = document.querySelector('.center-dot');\n  const crosshairVertical = document.querySelector('.crosshair-vertical');\n  const crosshairHorizontal = document.querySelector('.crosshair-horizontal');\n  const infoBox = document.getElementById('info-box');\n  const savedBoxesContainer = document.getElementById('saved-boxes-container');\n  const saveButton = document.getElementById('save');\n  const pointCount = 5; // 랜덤 점 개수\n  let points = [];\n  const moveStep = 5; // 점 이동 단위 거리\n\n  const textOptions = [\n    '▶Amomento_DENIM SHORTS',\n    '▶Our Legacy_TREBLE CUT',\n    '▶roa_Canvas Shorts',\n    '▶Yproject_Snap Off Jeans',\n    '▶AFRD_VTG AFRD SHORTS'\n  ];\n\n  const linkOptions = [\n    'https://amomento.co/product/detail.html?product_no=771&cate_no=48&display_group=1',\n    'https://www.ourlegacy.com/treble-cut-washed-grey-torino-stripe',\n    'https://www.roa-hiking.com/en-kr/products/roa-clothing-hunting-shorts-black-j277278?variant=47460113678668',\n    'https://www.yproject.fr/shop/denim/snap-off-jeans-heavy-sw-blue',\n    'https://thegreatalfred.com/product/detail.html?product_no=136&cate_no=1&display_group=2'\n  ];\n\n  let saveCount = 0;\n\n  // 초기화\n  resetGame();\n\n  // 점 이동 함수\n  function moveDot(dx, dy) {\n    const rect = scope.getBoundingClientRect();\n    const radius = rect.width / 2;\n    const dotRect = centerDot.getBoundingClientRect();\n\n    let x = dotRect.left - rect.left + dx + dotRect.width / 2;\n    let y = dotRect.top - rect.top + dy + dotRect.height / 2;\n\n    // 원 안에서의 움직임 제한\n    const distance = Math.sqrt((x - radius) ** 2 + (y - radius) ** 2);\n\n    if (distance <= radius) {\n      centerDot.style.left = `${(x / rect.width) * 100}%`;\n      centerDot.style.top = `${(y / rect.height) * 100}%`;\n\n      // 십자선 위치 업데이트\n      updateCrosshair(x, y, radius);\n\n      // 점 위치 감지 및 정보 표시\n      let pointFound = false;\n      points.forEach(point => {\n        const pointRect = point.getBoundingClientRect();\n        const pointX = pointRect.left - rect.left + pointRect.width / 2;\n        const pointY = pointRect.top - rect.top + pointRect.height / 2;\n\n        const distance = Math.sqrt((x - pointX) ** 2 + (y - pointY) ** 2);\n\n        if (distance < 5) { // 조준점과 점이 가까우면\n          infoBox.style.display = 'flex';\n          infoBox.textContent = 'Got it!!';\n          infoBox.setAttribute('data-detected', 'true');\n          pointFound = true;\n        }\n      });\n\n      if (!pointFound) {\n        infoBox.style.display = 'none';\n        infoBox.removeAttribute('data-detected');\n      }\n    }\n  }\n\n  function updateCrosshair(x, y, radius) {\n    crosshairVertical.style.left = `${x}px`;\n    crosshairHorizontal.style.top = `${y}px`;\n  }\n\n  // 방향 버튼 이벤트 리스너 추가\n  document.getElementById('up').addEventListener('click', () => moveDot(0, -moveStep));\n  document.getElementById('left').addEventListener('click', () => moveDot(-moveStep, 0));\n  document.getElementById('down').addEventListener('click', () => moveDot(0, moveStep));\n  document.getElementById('right').addEventListener('click', () => moveDot(moveStep, 0));\n\n  // 키보드 이벤트 리스너 추가\n  document.addEventListener('keydown', (event) => {\n    switch (event.key) {\n      case 'ArrowUp':\n        moveDot(0, -moveStep);\n        break;\n      case 'ArrowLeft':\n        moveDot(-moveStep, 0);\n        break;\n      case 'ArrowDown':\n        moveDot(0, moveStep);\n        break;\n      case 'ArrowRight':\n        moveDot(moveStep, 0);\n        break;\n    }\n  });\n\n  // 다시하기 버튼 이벤트 리스너 추가\n  document.getElementById('restart').addEventListener('click', resetGame);\n\n  // 저장하기 버튼 이벤트 리스너 추가\n  document.getElementById('save').addEventListener('click', saveInfoBox);\n\n  // 게임 초기화 함수\n  function resetGame() {\n    // 현재 상태 초기화\n    centerDot.style.left = '50%';\n    centerDot.style.top = '50%';\n    crosshairVertical.style.left = '50%';\n    crosshairHorizontal.style.top = '50%';\n\n    // 랜덤 점 생성\n    createRandomPoints();\n\n    // 정보 박스 숨기기\n    infoBox.style.display = 'none';\n    infoBox.removeAttribute('data-detected');\n    saveCount = 0;\n    saveButton.disabled = false;\n  }\n\n  // 랜덤 점 생성 함수\n  function createRandomPoints() {\n    // 기존 랜덤 점 제거\n    points.forEach(point => point.remove());\n    points = [];\n\n    // 새로운 랜덤 점 생성\n    for (let i = 0; i < pointCount; i++) {\n      const point = document.createElement('div');\n      point.classList.add('point');\n      point.style.top = `${Math.random() * 100}%`;\n      point.style.left = `${Math.random() * 100}%`;\n      point.style.backgroundColor = getRandomColor();\n      scope.appendChild(point);\n      points.push(point);\n    }\n  }\n\n  // 랜덤 색상 생성 함수\n  function getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  // 저장하기 기능 함수\n  function saveInfoBox() {\n    if (infoBox.style.display === 'flex' && infoBox.getAttribute('data-detected') === 'true' && saveCount < 5) {\n      const savedBoxes = savedBoxesContainer.children;\n      if (savedBoxes.length >= 5) {\n        savedBoxes[0].remove();\n      }\n      const index = savedBoxes.length % textOptions.length;\n      const newBox = document.createElement('div');\n      newBox.classList.add('saved-box');\n      const link = document.createElement('a');\n      link.href = linkOptions[index];\n      link.textContent = textOptions[index];\n      link.style.color = 'black'; // 링크 색상 블랙\n      link.style.textDecoration = 'none'; // 텍스트 장식 없음\n      newBox.appendChild(link);\n      savedBoxesContainer.appendChild(newBox);\n      saveCount++;\n      if (saveCount >= 5) {\n        saveButton.disabled = true;\n      }\n    }\n  }\n  \n});\n\n\n\n\n\n  // JavaScript를 사용하여 별을 생성하고 무작위 위치에 배치합니다.\n  function createStars() {\n    const numberOfStars = 200; // 생성할 별의 개수\n    const container = document.body;\n    for (let i = 0; i < numberOfStars; i++) {\n      const star = document.createElement('div');\n      star.className = 'star';\n      star.style.left = `${Math.random() * 100}%`;\n      star.style.top = `${Math.random() * 100}%`;\n      container.appendChild(star);\n    }\n  }\n  createStars();\n\n\n// 별똥별\ndocument.addEventListener('DOMContentLoaded', () => {\n  const numStars = 100;\n  const container = document.querySelector('.shooting-stars');\n\n  for (let i = 0; i < numStars; i++) {\n      const star = document.createElement('div');\n      star.className = 'star';\n      star.style.top = `${Math.random() * 100}vh`;\n      star.style.left = `${Math.random() * 100}vw`;\n      star.style.animationDelay = `${Math.random() * 5}s`;\n      star.style.animationDuration = `${2 + Math.random() * 3}s`;\n      container.appendChild(star);\n  }\n});\n\n//# sourceURL=webpack://bomi/./src/page_2bottom/bottom.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/page_2bottom/bottom.js"]();
/******/ 	
/******/ })()
;